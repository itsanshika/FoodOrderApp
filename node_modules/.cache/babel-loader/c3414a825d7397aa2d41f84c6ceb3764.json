{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anshi\\\\Desktop\\\\React\\\\FoodApp_01\\\\src\\\\store_context\\\\cartProvider.js\",\n    _s = $RefreshSig$();\n\n//this file manages the cart-context\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./Cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCart = {\n  items: [],\n  totalAmount: 0\n};\n\nfunction cartReducer(state, action) {\n  if (action.type === \"ADDITEM\") {\n    const updatingTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const itemExistAlreadyIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[itemExistAlreadyIndex];\n    let updatedItems; //console.log(action.item.amount);\n\n    if (existingCartItem) {\n      //console.log( existingCartItem.amount + action.item.amount);\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[itemExistAlreadyIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item); //concat is a javascript funtion which add the item into array and return new array.unlike puhsing items in the existing array.\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatingTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const itemIndex = state.items.findIndex(item => item.id === action.item_id);\n    const existingItem = state.items[itemIndex];\n    const updatedItems = state.items.filter(item => item.id !== action.item_id);\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCart;\n}\n\nfunction CartProvider(props) {\n  _s();\n\n  const [cartState, dispatchCartfun] = useReducer(cartReducer, defaultCart);\n\n  function addItemHandler(item) {\n    dispatchCartfun({\n      type: \"ADDITEM\",\n      item: item\n    });\n  }\n\n  function removeItemHandler(id) {\n    dispatchCartfun({\n      type: \"REMOVE\",\n      item_id: id\n    });\n  }\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n} //any component wrapped with this Cartprovider will get access to this CartContext data.As Cart Provider is a Provider which have access to context to all of  its childerns.\n\n\n_s(CartProvider, \"Uam75b9fU5drSW6mAjwO9H4S7Sc=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/anshi/Desktop/React/FoodApp_01/src/store_context/cartProvider.js"],"names":["React","useReducer","CartContext","defaultCart","items","totalAmount","cartReducer","state","action","type","updatingTotalAmount","item","price","amount","itemExistAlreadyIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","itemIndex","item_id","existingItem","filter","updatedTotalAmount","CartProvider","props","cartState","dispatchCartfun","addItemHandler","removeItemHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["//this file manages the cart-context\r\nimport React, { useReducer } from \"react\";\r\nimport CartContext from \"./Cart-context\";\r\n\r\nconst defaultCart = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nfunction cartReducer(state, action) {\r\n  if (action.type === \"ADDITEM\") {\r\n    const updatingTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    const itemExistAlreadyIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    const existingCartItem = state.items[itemExistAlreadyIndex];\r\n\r\n    let updatedItems;\r\n    //console.log(action.item.amount);\r\n\r\n    if (existingCartItem) {\r\n      //console.log( existingCartItem.amount + action.item.amount);\r\n\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[itemExistAlreadyIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item); //concat is a javascript funtion which add the item into array and return new array.unlike puhsing items in the existing array.\r\n    }\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatingTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"REMOVE\") {\r\n    const itemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item_id\r\n    );\r\n\r\n    const existingItem = state.items[itemIndex];\r\n    const updatedItems = state.items.filter(\r\n      (item) => item.id !== action.item_id\r\n    );\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  return defaultCart;\r\n}\r\n\r\nfunction CartProvider(props) {\r\n  const [cartState, dispatchCartfun] = useReducer(cartReducer, defaultCart);\r\n\r\n  function addItemHandler(item) {\r\n    dispatchCartfun({ type: \"ADDITEM\", item: item });\r\n  }\r\n  function removeItemHandler(id) {\r\n    dispatchCartfun({ type: \"REMOVE\", item_id: id });\r\n  }\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemHandler,\r\n    removeItem: removeItemHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\n//any component wrapped with this Cartprovider will get access to this CartContext data.As Cart Provider is a Provider which have access to context to all of  its childerns.\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}