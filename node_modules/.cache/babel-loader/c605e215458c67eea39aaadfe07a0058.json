{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anshi\\\\Desktop\\\\React\\\\FoodApp_01\\\\src\\\\store_context\\\\cartProvider.js\",\n    _s = $RefreshSig$();\n\n//this file manages the cart-context\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./Cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCart = {\n  items: [],\n  totalAmount: 0\n};\n\nfunction cartReducer(state, action) {\n  if (action.type === \"ADDITEM\") {\n    const updatingTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const itemExistAlreadyIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[itemExistAlreadyIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItem] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item); //concat is a javascript funtion which add the item into array and return new array.unlike puhsing items in the existing array.\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatingTotalAmount\n    };\n  }\n\n  return defaultCart;\n}\n\nfunction CartProvider(props) {\n  _s();\n\n  const [cartState, dispatchCartfun] = useReducer(cartReducer, defaultCart);\n\n  function addItemHandler(item) {\n    dispatchCartfun({\n      type: \"ADDITEM\",\n      item: item\n    });\n  }\n\n  function removeItemHandler(id) {\n    dispatchCartfun({\n      type: \"REMOVE\",\n      item_id: id\n    });\n  }\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItm: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n} //any component wrapped with this Cartprovider will get access to this CartContext data.As Cart Provider is a Provider which have access to context to all of  its childerns.\n\n\n_s(CartProvider, \"Uam75b9fU5drSW6mAjwO9H4S7Sc=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/anshi/Desktop/React/FoodApp_01/src/store_context/cartProvider.js"],"names":["React","useReducer","CartContext","defaultCart","items","totalAmount","cartReducer","state","action","type","updatingTotalAmount","item","price","amount","itemExistAlreadyIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCartfun","addItemHandler","removeItemHandler","item_id","cartContext","addItem","removeItm","children"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,WAAW,EAAE;AAFK,CAApB;;AAKA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIA,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,UAAMC,mBAAmB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAAhF;AAED,UAAMC,qBAAqB,GAACP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAuBJ,IAAD,IAASA,IAAI,CAACK,EAAL,KAAUR,MAAM,CAACG,IAAP,CAAYK,EAArD,CAA5B;AACA,UAAOC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAA1B;AAEA,QAAII,YAAJ;;AAGC,QAAGD,gBAAH,EACJ;AAGE,YAAME,WAAW,GAAC,EAChB,GAAGF,gBADa;AAEhBJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAAwBL,MAAM,CAACG,IAAP,CAAYE;AAF5B,OAAlB;AAIAK,MAAAA,YAAY,GAAC,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAb;AACAc,MAAAA,YAAY,CAACD,gBAAD,CAAZ,GAA+BE,WAA/B;AAED,KAXG,MAaA;AACCD,MAAAA,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf,CADD,CACiD;AAEhD;;AACL,WAAO;AACLP,MAAAA,KAAK,EAACc,YADD;AAELb,MAAAA,WAAW,EAACK;AAFP,KAAP;AAKG;;AAED,SAAOP,WAAP;AACD;;AAED,SAASkB,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC3B,QAAM,CAACC,SAAD,EAAYC,eAAZ,IAA+BvB,UAAU,CAACK,WAAD,EAAcH,WAAd,CAA/C;;AAEA,WAASsB,cAAT,CAAwBd,IAAxB,EAA8B;AAC5Ba,IAAAA,eAAe,CAAC;AAAEf,MAAAA,IAAI,EAAE,SAAR;AAAmBE,MAAAA,IAAI,EAAEA;AAAzB,KAAD,CAAf;AACD;;AACD,WAASe,iBAAT,CAA2BV,EAA3B,EAA+B;AAC7BQ,IAAAA,eAAe,CAAC;AAAEf,MAAAA,IAAI,EAAE,QAAR;AAAkBkB,MAAAA,OAAO,EAAEX;AAA3B,KAAD,CAAf;AACD;;AAED,QAAMY,WAAW,GAAG;AAClBxB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADC;AAElBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFL;AAGlBwB,IAAAA,OAAO,EAAEJ,cAHS;AAIlBK,IAAAA,SAAS,EAAEJ;AAJO,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACGN,KAAK,CAACS;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;;;GAxBSV,Y;;KAAAA,Y;AAyBT,eAAeA,YAAf","sourcesContent":["//this file manages the cart-context\r\nimport React, { useReducer } from \"react\";\r\nimport CartContext from \"./Cart-context\";\r\n\r\nconst defaultCart = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nfunction cartReducer(state, action) {\r\n  if (action.type === \"ADDITEM\") {\r\n    const updatingTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n   \r\n   const itemExistAlreadyIndex=state.items.findIndex((item)=> item.id===action.item.id);\r\n   const  existingCartItem = state.items[itemExistAlreadyIndex];\r\n\r\n   let updatedItems;\r\n   \r\n   \r\n    if(existingCartItem)\r\n{\r\n  \r\n \r\n  const updatedItem={\r\n    ...existingCartItem,\r\n    amount: existingCartItem.amount+action.item.amount\r\n  };\r\n  updatedItems=[...state.items];\r\n  updatedItems[existingCartItem]=updatedItem;\r\n \r\n}\r\nelse\r\n    {\r\n     updatedItems = state.items.concat(action.item); //concat is a javascript funtion which add the item into array and return new array.unlike puhsing items in the existing array.\r\n   \r\n    }\r\nreturn {\r\n  items:updatedItems,\r\n  totalAmount:updatingTotalAmount,\r\n};\r\n   \r\n  }\r\n\r\n  return defaultCart;\r\n}\r\n\r\nfunction CartProvider(props) {\r\n  const [cartState, dispatchCartfun] = useReducer(cartReducer, defaultCart);\r\n\r\n  function addItemHandler(item) {\r\n    dispatchCartfun({ type: \"ADDITEM\", item: item });\r\n  }\r\n  function removeItemHandler(id) {\r\n    dispatchCartfun({ type: \"REMOVE\", item_id: id });\r\n  }\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemHandler,\r\n    removeItm: removeItemHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\n//any component wrapped with this Cartprovider will get access to this CartContext data.As Cart Provider is a Provider which have access to context to all of  its childerns.\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}